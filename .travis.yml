os: linux
dist: xenial
language: shell

env:
  global:
    # GO VERSION is set here with GIMME_GO_VERSION see: https://github.com/travis-ci/gimme
    # may also want to run `go mod edit -go=1.13` to fix go.mod as well
    - GIMME_GO_VERSION=1.13.x GIMME_OS=linux GIMME_ARCH=amd64

branches:
  only:
  - master
  # https://docs.travis-ci.com/user/customizing-the-build/#safelisting-or-blocklisting-branches
  - /^v\d+\.\d+(\.\d+)?(-\S*)?$/

stages:
  - 'Tests'
  - 'Trigger FSC Tests'
  - 'Test Build using latest tag (no upload)'
  - 'Build, Upload and Publish (draft)'
  - 'Test github release assets'
  - 'Publish (real)'

jobs:

  include:

    - stage: Tests
      name: hadolint
      os: linux
      dist: xenial
      script:
        - make -e lint
        - for f in `find scripts/dockerfiles -type f`; do echo $f; docker run --rm -i hadolint/hadolint < $f; done

    - stage: Tests
      name: codecov.io
      os: linux
      dist: xenial
      script:
        - make -e cover COVER_FILE=coverage.txt
      after_success:
        # Replace with coveralls if/when the repo is made public
        - bash <(curl -s https://codecov.io/bash)

    - stage: Tests
      name: sourceclear
      os: linux
      dist: xenial
      addons:
        srcclr: true
      script:
        - go get -v -d ./...

    - stage: Tests
      name: windows build.ps1 test
      os: windows
      language: shell
      before_script: skip
      script:
        - PowerShell -Command Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
        - PowerShell -File "scripts\build.ps1" noninteractive
        - PowerShell -File "scripts\check_exe.ps1"
      after_success:
        - ( [ ${TRAVIS_EVENT_TYPE} = "push" ] && [ ! -z ${TRAVIS_TAG} ] ) && scripts/upload_artifacts.sh

    - stage: Tests
      name: acceptance
      os: linux
      dist: xenial
      language: python
      python: "3.7"
      install:
        - pip install -r tests/acceptance/requirements.txt
      script:
        - pytest -vv --diff-type=split tests/acceptance/test_acceptance/ --host http://localhost:8080

    - stage: 'Trigger FSC Tests'
      if: (branch = master AND type = push) OR type = pull_request OR tag IS present
      env:
        SDK=agent
        SDK_BRANCH=$(if [ -z "$TRAVIS_PULL_REQUEST_BRANCH" ]; then echo ${TRAVIS_BRANCH}; else echo "$TRAVIS_PULL_REQUEST_BRANCH"; fi)
      cache: false
      before_install:
        ./scripts/pull_travis_ci_tools.sh
      install: skip
      script:
        - "$HOME/travisci-tools/trigger-script-with-status-update.sh"

    - stage: 'Test Build using latest tag (no upload)'
      name: linux
      os: linux
      dist: xenial
      script:
        - export APP_VERSION=$(git describe --abbrev=0 --tags | tr -d '^v')
        - $TRAVIS_BUILD_DIR/scripts/ci_create_packages.sh
        - $TRAVIS_BUILD_DIR/scripts/ci_build_generate_secret.sh

    - stage: 'Build, Upload and Publish (draft)'
      if: type = push AND tag IS present AND tag =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      name: linux
      os: linux
      dist: xenial

      # The version of the app is set via git tag (below). This is picked up in the Makefile and compiled into the binary via LDFLAGS.
      # It is also picked up in scripts/Makefile.ci to be used in the package name when they are built.

      env: APP_VERSION=${TRAVIS_TAG#v}

      before_install:
        - ./scripts/pull_travis_ci_tools.sh
      install:
        # installs hub to ~/bin
        - $HOME/travisci-tools/release_github/install_hub.sh
        - export PATH=$HOME/bin:$HOME/travisci-tools/release_github:$PATH

      script:
        # now we're going to create packages & upload packages
        - $TRAVIS_BUILD_DIR/scripts/ci_create_packages.sh && $TRAVIS_BUILD_DIR/scripts/ci_upload_packages.sh
        # create the github release (draft)
        - release_github_v2.sh "$TRAVIS_TAG"
        # attach generate_secret to the github release
        - $TRAVIS_BUILD_DIR/scripts/ci_build_generate_secret.sh && $TRAVIS_BUILD_DIR/scripts/ci_attach_generate_secret.sh

    - stage: 'Test github release assets'
      if: type = push AND tag IS present AND tag =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      name: linux
      os: linux
      env: APP_VERSION=${TRAVIS_TAG#v}

      before_install:
        - ./scripts/pull_travis_ci_tools.sh

      install:
        # installs hub to ~/bin
        - $HOME/travisci-tools/release_github/install_hub.sh
        - export PATH=$HOME/bin:$HOME/travisci-tools/slack:$PATH

      before_script: skip

      script:
        - hub release download $(git describe --abbrev=0 --tags) -i '*-linux-amd64-*'
        - tar xvfz generate_secret-linux-amd64-${APP_VERSION}.tar.gz -C /tmp
        - /tmp/generate_secret

      after_failure:
        - SLACK_TEXT="${APP_VERSION} $TRAVIS_OS_NAME assets failed verification." send_to_slack.sh

    - stage: 'Test github release assets'
      if: type = push AND tag IS present AND tag =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      name: darwin
      os: osx
      env: APP_VERSION=${TRAVIS_TAG#v}

      before_install:
        - ./scripts/pull_travis_ci_tools.sh
        - HOMEBREW_NO_AUTO_UPDATE=1 brew install jq

      install:
        # installs hub to ~/bin
        - $HOME/travisci-tools/release_github/install_hub.sh
        - export PATH=$HOME/bin:$HOME/travisci-tools/slack:$PATH

      before_script: skip

      script:
        - hub release download $(git describe --abbrev=0 --tags) -i '*-darwin-amd64-*'
        - tar xvfz generate_secret-darwin-amd64-${APP_VERSION}.tar.gz -C /tmp
        - /tmp/generate_secret

      after_failure:
        - SLACK_TEXT="${APP_VERSION} $TRAVIS_OS_NAME assets failed verification." send_to_slack.sh

    - stage: 'Test github release assets'
      if: type = push AND tag IS present AND tag =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      name: windows
      os: windows
      env: APP_VERSION=${TRAVIS_TAG#v}

      before_install:
        - ./scripts/pull_travis_ci_tools.sh

      install:
        # installs hub to ~/bin
        - $HOME/travisci-tools/release_github/install_hub.sh
        - export PATH=$HOME/bin:$HOME/travisci-tools/slack:$PATH

      before_script: skip

      script:
        - hub release download $(git describe --abbrev=0 --tags) -i '*-windows-amd64-*'
        - tar xvfz generate_secret-windows-amd64-${APP_VERSION}.tar.gz -C /tmp
        - /tmp/generate_secret.exe

      after_failure:
        - SLACK_TEXT="${APP_VERSION} $TRAVIS_OS_NAME assets failed verification." send_to_slack.sh

    - stage: 'Publish (real)'
      if: type = push AND tag IS present AND tag =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      name: publish and notify in slack
      os: linux
      env: APP_VERSION=${TRAVIS_TAG#v}

      before_install:
        - ./scripts/pull_travis_ci_tools.sh

      install:
        # installs hub to ~/bin
        - $HOME/travisci-tools/release_github/install_hub.sh
        - export PATH=$HOME/bin:$HOME/travisci-tools/slack:$PATH

      before_script: skip

      script:
        - SLACK_TEXT="${APP_VERSION} all assets verified. Publishing https://github.com/optimizely/agent/releases/tag/${TRAVIS_TAG}" send_to_slack.sh
        # how to use hub: https://hub.github.com/hub.1.html
        - hub release edit --draft=false -m "" ${TRAVIS_TAG}

before_script:
  # https://github.com/travis-ci/gimme
  - eval "$(gimme)"
  - make -e setup build
