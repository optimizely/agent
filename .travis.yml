language: minimal

env:
  global:
    # GO VERSION is set here with GIMME_GO_VERSION see: https://github.com/travis-ci/gimme
    # may also want to run `go mod edit -go=1.13` to fix go.mod as well
    - GIMME_GO_VERSION=1.13.x GIMME_OS=linux GIMME_ARCH=amd64

branches:
  only:
  - master
  # https://docs.travis-ci.com/user/customizing-the-build/#safelisting-or-blocklisting-branches
  - /^v\d+\.\d+(\.\d+)?(-\S*)?$/

stages:
  - 'Lint markdown files'
  - 'Test'
  - 'Build'


jobs:

  include:

    - stage: 'Lint markdown files'
      os: linux
      language: generic
      install: gem install awesome_bot
      before_script: skip
      script:
        - find . -type f -name '*.md' -exec awesome_bot {} \;

    - stage: 'Lint markdown files'
      os: linux
      language: generic
      before_install: skip
      install:
        - npm i -g markdown-spellcheck
      before_script:
        - wget --quiet https://raw.githubusercontent.com/optimizely/mdspell-config/master/.spelling
      script:
        - mdspell -a -n -r --en-us '**/*.md'
      after_success: skip

    - stage: Test
      name: lint
      os: linux
      dist: xenial
      script:
        - make -e lint
        - for f in `find scripts/dockerfiles -type f`; do echo $f; docker run --rm -i hadolint/hadolint < $f; done

    - stage: Test
      name: unit
      os: linux
      dist: xenial
      script:
        - make -e cover COVER_FILE=coverage.txt
      after_success:
        # Replace with coveralls if/when the repo is made public
        - bash <(curl -s https://codecov.io/bash)

    - stage: Test
      name: srcclr
      os: linux
      dist: xenial
      install:
        - curl -sSL https://www.sourceclear.com/install | bash
      script:
        - scripts/run_srcclr.sh

    - stage: Test
      name: windows build.ps1 test
      os: windows
      language: shell
      before_script: skip
      script:
        - PowerShell -Command Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser
        - PowerShell -File "scripts\build.ps1" noninteractive
        - PowerShell -File "scripts\check_exe.ps1"
      after_success:
        - ( [ ${TRAVIS_EVENT_TYPE} = "push" ] && [ ! -z ${TRAVIS_TAG} ] ) && scripts/upload_artifacts.sh

    - stage: Integration
      name: acceptance
      os: linux
      dist: xenial
      language: python
      python:
        - "3.7"
      install:
        - pip install -r tests/acceptance/requirements.txt
      script:
        - pytest -vv --diff-type=split tests/acceptance/test_acceptance/ --host http://localhost:8080

    - stage: 'Building Optimizely Agent'
      if: (branch = master AND type = push) OR type = pull_request OR tag IS present
      env:
        SDK=agent
        SDK_BRANCH=$(if [ -z "$TRAVIS_PULL_REQUEST_BRANCH" ]; then echo ${TRAVIS_BRANCH}; else echo "$TRAVIS_PULL_REQUEST_BRANCH"; fi)
      cache: false
      before_install:
        ./scripts/pull_travis_ci_tools.sh
      install: skip
      script:
        - "$HOME/travisci-tools/trigger-script-with-status-update.sh"

    - stage: Test Build using latest tag (no upload)
      name: linux
      os: linux
      dist: xenial

      script:
        - export APP_VERSION=$(git describe --abbrev=0 --tags | tr -d '^v')
        - $TRAVIS_BUILD_DIR/scripts/ci_create_packages.sh

    - stage: Build and Upload
      if: type = push AND tag IS present
      name: linux
      os: linux
      dist: xenial

      # The version of the app is set via git tag (below). This is picked up in the Makefile and compiled into the binary via LDFLAGS.
      # It is also picked up in scripts/Makefile.ci to be used in the package name when they are built.

      env: APP_VERSION=${TRAVIS_TAG#v}

      script:
        # now we're going to create packages & upload packages
        - $TRAVIS_BUILD_DIR/scripts/ci_create_packages.sh && $TRAVIS_BUILD_DIR/scripts/ci_upload_packages.sh

before_script:
  # https://github.com/travis-ci/gimme
  - eval "$(gimme)"
  - make -e setup build
